
import asyncio
import subprocess
import sys
from operator import contains
from tkinter import Y
import black

def get_files():
    try:
        command = "git diff --name-only --cached --diff-filter=ACMRTUXB | grep '\.py$'"
        files = (
            subprocess.check_output(command, shell=True)
            .decode("utf-8")
            .strip()
            .replace("\n", " ")
        )
    except subprocess.CalledProcessError:
        # Handle the error
        print("no python file staged commits")
        sys.exit(0)
    return files


files = get_files()


def run_black():
    print("Running Black...")
    listed_files = files.split()

    for element in listed_files:
        with open(element, "r") as file:
            file_content = file.read()
        reformatted_content = black.format_str(file_content, mode=black.FileMode())
        print("Reformatted content" + "\n************************\n" + reformatted_content)           
        print("Changes applied.")
        with open(element, "w") as file:
            file.write(reformatted_content) 


run_black()


async def run_pylint():
    print("Running PyLint...")
    task = await asyncio.create_subprocess_shell(
        "pylint " + files,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
    )
    return_value_out, return_value_err = await task.communicate()
    if task.returncode != 0:
        print("PyLint found errors, commit aborted")
        print("\n" + return_value_out.decode("utf-8"))
        return 2


async def run_pyright():
    print("Running PyRight...")
    task = await asyncio.create_subprocess_shell(
        "pyright " + files,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
    )
    return_value_out, return_value_err = await task.communicate()
    if task.returncode != 0:
        print("PyRight found errors, commit aborted")
        print("\n" + return_value_out.decode("utf-8"))
        return 1


async def main():
    task2 = asyncio.create_task(run_pyright())
    task3 = asyncio.create_task(run_pylint())
    results = await asyncio.gather(task2, task3)
    if 1 in results or 2 in results:
        sys.exit(1)
    print("All tests passed, files will proceed to commit")
    sys.exit(0)


asyncio.run(main())
