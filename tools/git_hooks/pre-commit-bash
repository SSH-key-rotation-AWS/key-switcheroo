#!/bin/env python3.11
import asyncio
from operator import contains
import subprocess
import sys

def get_files():
    command = "git diff --name-only --cached --diff-filter=ACMRTUXB  | grep -E '\.py$'"
    return subprocess.check_output(command, shell=True).decode("utf-8").strip().replace("\n"," ")

files = get_files()


import asyncio

async def run_black():
    print("Running Black...")
    task = await asyncio.create_subprocess_shell(
        "black" + files,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE)
    return_value_out, return_value_err = await task.communicate()

async def run_pylint():
    print("Running PyLint...")
    task = await asyncio.create_subprocess_shell(
        "pylint" + files,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE)
    return_value_out, return_value_err = await task.communicate()
    if task.returncode != 0:
        print("PyLint found errors, commit aborted")
        return 2

async def run_pyright():
    print("Running PyRight...")
    task = await asyncio.create_subprocess_shell(
        "pyright" + files,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE)
    return_value_out, return_value_err = await task.communicate()
    if task.returncode != 0:
        print("PyRight found errors, commit aborted")
        return 1

async def main():
    task1 = asyncio.create_task(run_black())
    task2 = asyncio.create_task(run_pyright())
    task3  = asyncio.create_task(run_pylint())
    results = await asyncio.gather(task1,task2,task3)
    if 1 in results or 2 in results:
        sys.exit(1)
    else:
        print("All tests passed, files will procceed to commit")
        sys.exit(0)

asyncio.run(main())






    



















# echo "Running Black..."
# # Run Black on all Python files in the staged changes
# git diff --cached --name-only --diff-filter=ACMRTUXB | grep -E '\.py$' | xargs black

# echo "Running Pylint..."
# # Run Pylint on Python files in the staged changes
# git diff --cached --name-only --diff-filter=ACMRTUXB | grep -E '\.py$' | xargs pylint
# # Check the exit code of Pylint
# PYLINT_EXIT_CODE=$?
# if [ $PYLINT_EXIT_CODE -ne 0 ]; then
#   echo "Pylint found issues. Commit aborted."
#   exit 1
# fi

# echo "Running Pyright..."
# # Run Pyright on all Python files in the staged changes
# git diff --cached --name-only --diff-filter=ACMRTUXB | grep -E '\.py$' | xargs pyright
# # Check the exit code of Pyright
# PYRIGHT_EXIT_CODE=$?
# if [ $PYRIGHT_EXIT_CODE -ne 0 ]; then
#   echo "Pyright found type errors. Commit aborted."
#   exit 1
# fi
# echo "Pyright completed successfully."


# echo "All checks completed, commit done."
# exit 0
